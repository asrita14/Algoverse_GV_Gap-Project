#!/usr/bin/env python3
"""
update_taxonomy.py - Updates the taxonomy summary table in taxonomy.md

WHAT THIS SCRIPT DOES:
1. Reads tagged error files (created by tag_errors.py)
2. Counts how many errors of each type occurred
3. Updates the markdown table in taxonomy.md with new counts

FIXED ISSUE: Changed from .taxonomy_error to .taxonomy_code to match tag_errors.py output
#him - TAXONOMY MISMATCH FIX: Line 10 - This comment documents the key fix we made
"""
import json
import re
from pathlib import Path

# Error categories we want to track in the summary table
# These match the categories defined in taxonomies.py
cols = ["calc_error", "format_mismatch", "hedged_nonanswer",
        "instruction_miss", "logic_bug", "spec_misread"]

# Map dataset names to their tagged result files
# These files are created by running tag_errors.py on verified outputs
datasets = {
    "GSM8K": "results/gsm8k_tagged_val.jsonl",
    "MBPP": "results/mbpp_tagged_val.jsonl", 
    "TruthfulQA": "results/truthfulqa_tagged_val.jsonl",
}

def count_errors_in_file(file_path):
    """Count errors by type in a tagged JSONL file"""
    counts = {c: 0 for c in cols}
    
    if not Path(file_path).exists():
        print(f"Warning: {file_path} not found, using zeros")
        return counts
    
    with open(file_path, 'r') as f:
        for line in f:
            try:
                record = json.loads(line.strip())
                # Only count rejected items (items the verifier said were wrong)
                if record.get("verify", {}).get("label") == "reject":
                    error_code = record.get("taxonomy_code", "")  #him - TAXONOMY MISMATCH FIX: Line 43 - Changed from "taxonomy_error" to "taxonomy_code" to match what tag_errors.py actually outputs
                    if error_code in counts:
                        counts[error_code] += 1
            except json.JSONDecodeError:
                continue  # Skip malformed lines
    
    return counts

def update_taxonomy_markdown():
    """Update the taxonomy.md file with new error counts"""
    # Count errors for each dataset
    rows = []
    for dataset_name, file_path in datasets.items():
        counts = count_errors_in_file(file_path)
        row = [dataset_name] + [counts[col] for col in cols]
        rows.append(row)
    
    # Create markdown table
    table_lines = ["| Dataset    | " + " | ".join(cols) + " |"]
    table_lines.append("|------------|" + "|".join(["-" * (len(col) + 2) for col in cols]) + "|")
    
    for row in rows:
        table_lines.append("| " + " | ".join(str(x) for x in row) + " |")
    
    table_content = "\n".join(table_lines)
    
    # Read current taxonomy.md
    taxonomy_file = Path("taxonomy.md")
    if not taxonomy_file.exists():
        print("Error: taxonomy.md not found")
        return
    
    with open(taxonomy_file, 'r') as f:
        content = f.read()
    
    # Replace the autogenerated table section
    # Look for the AUTOGEN markers and replace everything between them
    start_marker = "<!-- AUTOGEN:START -->"
    end_marker = "<!-- AUTOGEN:END -->"
    
    start_idx = content.find(start_marker)
    end_idx = content.find(end_marker)
    
    if start_idx == -1 or end_idx == -1:
        print("Error: Could not find AUTOGEN markers in taxonomy.md")
        return
    
    # Replace the content between markers
    new_content = (
        content[:start_idx + len(start_marker)] + 
        "\n" + table_content + "\n" +
        content[end_idx:]
    )
    
    # Write back to file
    with open(taxonomy_file, 'w') as f:
        f.write(new_content)
    
    print("Updated taxonomy.md with new error counts")
    print("\nNew table:")
    print(table_content)

if __name__ == "__main__":
    update_taxonomy_markdown()

